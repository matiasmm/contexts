#!/usr/bin/python
import sys
import os
import fnmatch
import re


class Context:
 
  editor_vim = 'vim -o'

  def __init__(self):
      self.ide= self.editor_vim
      self.context_dir = ".contexts"

  def open(self, context):
      self.context_file = self.context_dir + "/" + context
      print self.context_file
      f = open(self.context_file, 'r')
      args = f.read().replace("\n", ' ')
      os.system(self.ide + " " + args)

  def exists(self, context):
      self.context_file = self.context_dir + "/" + context
      return os.path.exists(self.context_file)

  def create(self, context):
      self.possible_files()
      input = raw_input("Add files separed by space: ")
      if(False == os.path.exists(self.context_dir)):
          os.mkdir(self.context_dir)
      filename = self.context_dir + "/"+ context
      f = open(filename,"w")
      f.write(input)
      f.close()

  def add(self, context, input):
      self.possible_files()
      if(False == os.path.exists(self.context_dir)):
          os.mkdir(self.context_dir)
      filename = self.context_dir + "/"+ context
      f = open(filename,"a")
      f.write(" " +input)
      f.close()

  def list(self):
      if(False == os.path.exists(self.context_dir)):
          print "There isn't a context dir"
          return False
      for filename in os.listdir(self.context_dir):
         print  filename

  def remove(self, context):
      if(False == os.path.exists(self.context_dir + '/' + context)):
          print "There isn't such a context called: " + context
          return False
      os.remove(self.context_dir + '/' + context)

  def possible_files(self):
      if(self.editor_vim == self.ide):
          self.vim_swp()

  def vim_swp(self):
      for root, dirnames, filenames in os.walk('.'):
          for fn in filenames:
              pattern = re.match('\.(.+)\.swp', fn)
              if(pattern):
                  print root + '/' + pattern.group(1)



 
if len(sys.argv) == 2:
    argv1 = sys.argv[1]
else:
    argv1 = 'ls'

c = Context()
try:
    if(argv1):
        if(argv1 == 'ls'):
             c.list()
             exit()
        if(argv1 == 'rm'):
             c.remove(sys.argv[2])
             exit1 in ()
        if(argv1 == 'add'):
             c.add(sys.argv[2], sys.argv[3])
             exit()
        if(c.exists(argv1)):
             c.open(argv1)
        else:
             c.create(argv1)
except (KeyboardInterrupt, SystemExit):
    print '\nBye\n'
    exit()    
    raise
